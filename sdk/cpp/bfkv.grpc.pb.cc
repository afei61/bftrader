// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: bfkv.proto

#include "bfkv.pb.h"
#include "bfkv.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bftrader {
namespace bfkv {

static const char* BfKvService_method_names[] = {
  "/bftrader.bfkv.BfKvService/Ping",
  "/bftrader.bfkv.BfKvService/SetKv",
  "/bftrader.bfkv.BfKvService/GetKv",
};

std::unique_ptr< BfKvService::Stub> BfKvService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BfKvService::Stub> stub(new BfKvService::Stub(channel));
  return stub;
}

BfKvService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Ping_(BfKvService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetKv_(BfKvService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetKv_(BfKvService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BfKvService::Stub::Ping(::grpc::ClientContext* context, const ::bftrader::BfPingData& request, ::bftrader::BfPingData* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bftrader::BfPingData>* BfKvService::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::bftrader::BfPingData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bftrader::BfPingData>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status BfKvService::Stub::SetKv(::grpc::ClientContext* context, const ::bftrader::BfKvData& request, ::bftrader::BfVoid* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SetKv_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>* BfKvService::Stub::AsyncSetKvRaw(::grpc::ClientContext* context, const ::bftrader::BfKvData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bftrader::BfVoid>(channel_.get(), cq, rpcmethod_SetKv_, context, request);
}

::grpc::Status BfKvService::Stub::GetKv(::grpc::ClientContext* context, const ::bftrader::BfKvData& request, ::bftrader::BfKvData* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetKv_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bftrader::BfKvData>* BfKvService::Stub::AsyncGetKvRaw(::grpc::ClientContext* context, const ::bftrader::BfKvData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::bftrader::BfKvData>(channel_.get(), cq, rpcmethod_GetKv_, context, request);
}

BfKvService::Service::Service() {
  (void)BfKvService_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      BfKvService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfKvService::Service, ::bftrader::BfPingData, ::bftrader::BfPingData>(
          std::mem_fn(&BfKvService::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfKvService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfKvService::Service, ::bftrader::BfKvData, ::bftrader::BfVoid>(
          std::mem_fn(&BfKvService::Service::SetKv), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      BfKvService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< BfKvService::Service, ::bftrader::BfKvData, ::bftrader::BfKvData>(
          std::mem_fn(&BfKvService::Service::GetKv), this)));
}

BfKvService::Service::~Service() {
}

::grpc::Status BfKvService::Service::Ping(::grpc::ServerContext* context, const ::bftrader::BfPingData* request, ::bftrader::BfPingData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfKvService::Service::SetKv(::grpc::ServerContext* context, const ::bftrader::BfKvData* request, ::bftrader::BfVoid* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BfKvService::Service::GetKv(::grpc::ServerContext* context, const ::bftrader::BfKvData* request, ::bftrader::BfKvData* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bftrader
}  // namespace bfkv

