syntax = "proto3";

// option optimize_for = CODE_SIZE;
// option cc_enable_arenas = true;

package bftrader.bfproxy;

import "bftrader.proto";

//
// 代理服务，实现管理和转发用
//
service BfProxyService{
    // 活跃检测
    // 也可以在这里做收盘处理，如果很长时间没有收到tick
    rpc OnPing(BfPingData) returns (BfPingData) {}

    // 交易所开机/连通通知，可以在这里做：
    // 1. 如果是收盘时间可以做上次收盘处理
    // 2. 查询持仓 查询合约，核准数据
    // 3. 如果是断网重连，可以自己度量
    rpc OnTradeWillBegin(BfVoid) returns (BfVoid) {}
    
    // 先发OnTradeWillBegin，然后查询合约，成功发此消息
    // 和 OnTradeWillBegin的间隙在1秒左右，可以做清理
    rpc OnGotContracts(BfVoid) returns (BfVoid) {}
    
    // 行情回报
    rpc OnTick(BfTickData) returns (BfVoid) {}
    
    // 命令/回报错误信息
    rpc OnError(BfErrorData) returns (BfVoid) {}

    // 日志信息
    rpc OnLog(BfLogData) returns (BfVoid) {}
    
    // 成交回报
    rpc OnTrade(BfTradeData) returns (BfVoid) {}
    
    // 委托回报
    rpc OnOrder(BfOrderData) returns (BfVoid) {}
        
    // 持仓回报
    rpc OnPosition(BfPositionData) returns (BfVoid) {}
    
    // 账号信息回报
    rpc OnAccount(BfAccountData) returns (BfVoid) {}
}
