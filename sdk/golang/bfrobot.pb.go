// Code generated by protoc-gen-go.
// source: bfrobot.proto
// DO NOT EDIT!

/*
Package bftrader_bfrobot is a generated protocol buffer package.

It is generated from these files:
	bfrobot.proto

It has these top-level messages:
*/
package bftrader_bfrobot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfRobotService service

type BfRobotServiceClient interface {
	// 活跃检测
	// 也可以在这里做收盘处理，如果很长时间没有收到tick
	OnPing(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error)
	// 行情回报
	OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 生命周期控制
	OnInit(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	OnStart(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	OnStop(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
}

type bfRobotServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfRobotServiceClient(cc *grpc.ClientConn) BfRobotServiceClient {
	return &bfRobotServiceClient{cc}
}

func (c *bfRobotServiceClient) OnPing(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error) {
	out := new(bftrader.BfPingData)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnTick(ctx context.Context, in *bftrader.BfTickData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnTick", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnTrade(ctx context.Context, in *bftrader.BfTradeData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnTrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnOrder(ctx context.Context, in *bftrader.BfOrderData, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnInit(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnInit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnStart(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnStart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfRobotServiceClient) OnStop(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfrobot.BfRobotService/OnStop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfRobotService service

type BfRobotServiceServer interface {
	// 活跃检测
	// 也可以在这里做收盘处理，如果很长时间没有收到tick
	OnPing(context.Context, *bftrader.BfPingData) (*bftrader.BfPingData, error)
	// 行情回报
	OnTick(context.Context, *bftrader.BfTickData) (*bftrader.BfVoid, error)
	// 成交回报
	OnTrade(context.Context, *bftrader.BfTradeData) (*bftrader.BfVoid, error)
	// 委托回报
	OnOrder(context.Context, *bftrader.BfOrderData) (*bftrader.BfVoid, error)
	// 生命周期控制
	OnInit(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	OnStart(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	OnStop(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
}

func RegisterBfRobotServiceServer(s *grpc.Server, srv BfRobotServiceServer) {
	s.RegisterService(&_BfRobotService_serviceDesc, srv)
}

func _BfRobotService_OnPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnPing(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnTick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTickData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnTick(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfTradeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnTrade(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfOrderData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnInit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnStart(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfRobotService_OnStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfRobotServiceServer).OnStop(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfRobotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfrobot.BfRobotService",
	HandlerType: (*BfRobotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnPing",
			Handler:    _BfRobotService_OnPing_Handler,
		},
		{
			MethodName: "OnTick",
			Handler:    _BfRobotService_OnTick_Handler,
		},
		{
			MethodName: "OnTrade",
			Handler:    _BfRobotService_OnTrade_Handler,
		},
		{
			MethodName: "OnOrder",
			Handler:    _BfRobotService_OnOrder_Handler,
		},
		{
			MethodName: "OnInit",
			Handler:    _BfRobotService_OnInit_Handler,
		},
		{
			MethodName: "OnStart",
			Handler:    _BfRobotService_OnStart_Handler,
		},
		{
			MethodName: "OnStop",
			Handler:    _BfRobotService_OnStop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4a, 0x2b, 0xca,
	0x4f, 0xca, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x48, 0x4a, 0x2b, 0x29, 0x4a,
	0x4c, 0x49, 0x2d, 0xd2, 0x83, 0x8a, 0x4b, 0xf1, 0xc1, 0x45, 0xc0, 0x2a, 0x8c, 0x7e, 0x32, 0x71,
	0xf1, 0x39, 0xa5, 0x05, 0x81, 0xe4, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xcc, 0xb8,
	0xd8, 0xfc, 0xf3, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0x44, 0xf4, 0xe0, 0xaa, 0x9d, 0xd2, 0x40, 0x22,
	0x2e, 0x89, 0x25, 0x89, 0x52, 0x58, 0x45, 0x95, 0x18, 0x84, 0x8c, 0x40, 0xfa, 0x42, 0x32, 0x93,
	0xb3, 0x51, 0xf5, 0x81, 0x44, 0xc0, 0xfa, 0x04, 0x90, 0x45, 0xc3, 0xf2, 0x33, 0x53, 0x80, 0x7a,
	0x4c, 0xb8, 0xd8, 0x81, 0x7a, 0x40, 0x82, 0x42, 0xa2, 0x28, 0x9a, 0x40, 0x0c, 0xfc, 0xba, 0xfc,
	0x8b, 0x80, 0x62, 0xa8, 0xba, 0xc0, 0x42, 0x38, 0x75, 0xe9, 0x81, 0xdc, 0xe7, 0x99, 0x97, 0x59,
	0x22, 0x84, 0x21, 0x8b, 0x55, 0xbd, 0x3e, 0xc8, 0x96, 0xe0, 0x92, 0xc4, 0x22, 0x62, 0x35, 0x80,
	0x2d, 0x08, 0x2e, 0xc9, 0x2f, 0x20, 0x4e, 0x7d, 0x12, 0x1b, 0x38, 0x0a, 0x8c, 0x01, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xf2, 0x63, 0xcb, 0xb5, 0x01, 0x00, 0x00,
}
