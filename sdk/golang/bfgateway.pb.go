// Code generated by protoc-gen-go.
// source: bfgateway.proto
// DO NOT EDIT!

/*
Package bftrader_bfgateway is a generated protocol buffer package.

It is generated from these files:
	bfgateway.proto

It has these top-level messages:
*/
package bftrader_bfgateway

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import bftrader "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for BfGatewayService service

type BfGatewayServiceClient interface {
	// 请求建立到proxy的连接
	Connect(ctx context.Context, in *bftrader.BfConnectReq, opts ...grpc.CallOption) (*bftrader.BfConnectResp, error)
	// 活跃检测
	Ping(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error)
	// 请求断开到proxy的连接
	Disconnect(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 获取交易合约信息
	GetContract(ctx context.Context, in *bftrader.BfGetContractReq, opts ...grpc.CallOption) (*bftrader.BfContractData, error)
	// 发单
	SendOrder(ctx context.Context, in *bftrader.BfSendOrderReq, opts ...grpc.CallOption) (*bftrader.BfSendOrderResp, error)
	// 撤单
	CancelOrder(ctx context.Context, in *bftrader.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 查询账户信息
	QueryAccount(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
	// 查询持仓信息
	QueryPosition(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error)
}

type bfGatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewBfGatewayServiceClient(cc *grpc.ClientConn) BfGatewayServiceClient {
	return &bfGatewayServiceClient{cc}
}

func (c *bfGatewayServiceClient) Connect(ctx context.Context, in *bftrader.BfConnectReq, opts ...grpc.CallOption) (*bftrader.BfConnectResp, error) {
	out := new(bftrader.BfConnectResp)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) Ping(ctx context.Context, in *bftrader.BfPingData, opts ...grpc.CallOption) (*bftrader.BfPingData, error) {
	out := new(bftrader.BfPingData)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) Disconnect(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) GetContract(ctx context.Context, in *bftrader.BfGetContractReq, opts ...grpc.CallOption) (*bftrader.BfContractData, error) {
	out := new(bftrader.BfContractData)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/GetContract", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) SendOrder(ctx context.Context, in *bftrader.BfSendOrderReq, opts ...grpc.CallOption) (*bftrader.BfSendOrderResp, error) {
	out := new(bftrader.BfSendOrderResp)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/SendOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) CancelOrder(ctx context.Context, in *bftrader.BfCancelOrderReq, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryAccount(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/QueryAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bfGatewayServiceClient) QueryPosition(ctx context.Context, in *bftrader.BfVoid, opts ...grpc.CallOption) (*bftrader.BfVoid, error) {
	out := new(bftrader.BfVoid)
	err := grpc.Invoke(ctx, "/bftrader.bfgateway.BfGatewayService/QueryPosition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BfGatewayService service

type BfGatewayServiceServer interface {
	// 请求建立到proxy的连接
	Connect(context.Context, *bftrader.BfConnectReq) (*bftrader.BfConnectResp, error)
	// 活跃检测
	Ping(context.Context, *bftrader.BfPingData) (*bftrader.BfPingData, error)
	// 请求断开到proxy的连接
	Disconnect(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 获取交易合约信息
	GetContract(context.Context, *bftrader.BfGetContractReq) (*bftrader.BfContractData, error)
	// 发单
	SendOrder(context.Context, *bftrader.BfSendOrderReq) (*bftrader.BfSendOrderResp, error)
	// 撤单
	CancelOrder(context.Context, *bftrader.BfCancelOrderReq) (*bftrader.BfVoid, error)
	// 查询账户信息
	QueryAccount(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
	// 查询持仓信息
	QueryPosition(context.Context, *bftrader.BfVoid) (*bftrader.BfVoid, error)
}

func RegisterBfGatewayServiceServer(s *grpc.Server, srv BfGatewayServiceServer) {
	s.RegisterService(&_BfGatewayService_serviceDesc, srv)
}

func _BfGatewayService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfConnectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Connect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfPingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).Disconnect(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfGetContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).GetContract(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_SendOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfSendOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).SendOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfCancelOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).CancelOrder(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_QueryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).QueryAccount(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BfGatewayService_QueryPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(bftrader.BfVoid)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BfGatewayServiceServer).QueryPosition(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BfGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftrader.bfgateway.BfGatewayService",
	HandlerType: (*BfGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _BfGatewayService_Connect_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _BfGatewayService_Ping_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _BfGatewayService_Disconnect_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _BfGatewayService_GetContract_Handler,
		},
		{
			MethodName: "SendOrder",
			Handler:    _BfGatewayService_SendOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _BfGatewayService_CancelOrder_Handler,
		},
		{
			MethodName: "QueryAccount",
			Handler:    _BfGatewayService_QueryAccount_Handler,
		},
		{
			MethodName: "QueryPosition",
			Handler:    _BfGatewayService_QueryPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x91, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0x86, 0x05, 0x45, 0x71, 0xea, 0x47, 0x09, 0xe2, 0x47, 0x8e, 0xfe, 0x80, 0x3d, 0xd4, 0x7a,
	0xd3, 0x83, 0xdb, 0x4a, 0x8f, 0x56, 0x0b, 0xde, 0xb3, 0xd9, 0x49, 0x09, 0x48, 0x52, 0xb3, 0xa9,
	0xb2, 0x3f, 0xdb, 0x7f, 0x60, 0x92, 0x5d, 0x42, 0x56, 0xb7, 0xb0, 0xd7, 0xe7, 0x79, 0xdf, 0xcc,
	0x0c, 0x81, 0xf3, 0x42, 0xac, 0x99, 0xc5, 0x6f, 0x56, 0x67, 0x1b, 0xa3, 0xad, 0x26, 0xa4, 0x10,
	0xd6, 0xb0, 0x12, 0x4d, 0x16, 0x0d, 0x3d, 0x8b, 0x2c, 0x64, 0x26, 0x3f, 0xfb, 0x30, 0xce, 0xc5,
	0xa2, 0xb1, 0x2b, 0x34, 0x5f, 0x92, 0x23, 0x79, 0x80, 0xa3, 0x99, 0x56, 0x0a, 0xb9, 0x25, 0x97,
	0x59, 0x2c, 0xe4, 0xa2, 0x85, 0x6f, 0xf8, 0x49, 0xaf, 0x7a, 0x79, 0xb5, 0xb9, 0xdd, 0x23, 0x53,
	0x38, 0x58, 0x4a, 0xb5, 0x26, 0x17, 0x69, 0xc4, 0x93, 0x39, 0xb3, 0x8c, 0xf6, 0x52, 0xd7, 0x9a,
	0x00, 0xcc, 0x65, 0xc5, 0xdb, 0xb1, 0xe3, 0x34, 0xf5, 0xae, 0x65, 0x49, 0xff, 0x11, 0xd7, 0x79,
	0x86, 0xd1, 0x02, 0xad, 0x9b, 0xee, 0x84, 0x2b, 0xd1, 0x34, 0x92, 0x08, 0xbf, 0xef, 0xf5, 0x9f,
	0x7d, 0x83, 0x68, 0x47, 0xe7, 0x70, 0xbc, 0x42, 0x55, 0xbe, 0x18, 0x67, 0x49, 0x27, 0x18, 0xb1,
	0x7f, 0xe2, 0x66, 0x87, 0x09, 0x47, 0x3f, 0xc2, 0x68, 0xc6, 0x14, 0xc7, 0x8f, 0xe6, 0x95, 0xce,
	0x2a, 0x89, 0xf0, 0xef, 0xf4, 0x5d, 0x32, 0x85, 0x93, 0xd7, 0x2d, 0x9a, 0xfa, 0x89, 0x73, 0xbd,
	0x55, 0x43, 0xef, 0xbf, 0x87, 0xd3, 0xd0, 0x5a, 0xea, 0x4a, 0x5a, 0xa9, 0xd5, 0xb0, 0x5a, 0x71,
	0x18, 0xbe, 0xfe, 0xee, 0x37, 0x00, 0x00, 0xff, 0xff, 0x23, 0xe5, 0xcc, 0x42, 0x31, 0x02, 0x00,
	0x00,
}
